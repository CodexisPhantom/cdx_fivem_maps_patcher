name: Build and Release cdx_fivem_maps_patcher

on:
  push:
    tags:
      - "v*"

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Cache CodeWalker Repository
        id: cache-codewalker
        uses: actions/cache@v4
        with:
          path: CodeWalkerRepo
          key: codewalker-${{ hashFiles('**/Directory.Build.props') }}-${{ github.run_id }}
          restore-keys: |
            codewalker-

      - name: Clone CodeWalker Repository
        if: steps.cache-codewalker.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 https://github.com/dexyfex/CodeWalker.git CodeWalkerRepo

      - name: Setup CodeWalker.Core
        shell: pwsh
        run: |
          if (Test-Path "CodeWalker.Core") {
            Remove-Item -Recurse -Force "CodeWalker.Core"
          }
          Copy-Item -Recurse "CodeWalkerRepo\CodeWalker.Core" "."
          
          if (!(Test-Path "CodeWalker.Core\CodeWalker.Core.csproj")) {
            Write-Host "❌ CodeWalker.Core setup failed!"
            exit 1
          }
          Write-Host "✅ CodeWalker.Core setup complete"

      - name: Patch CodeWalker.Core
        shell: pwsh
        run: |
          $file = "CodeWalker.Core\GameFiles\RpfManager.cs"
          if (!(Test-Path $file)) {
            Write-Host "❌ RpfManager.cs not found at: $file"
            exit 1
          }
          
          $content = Get-Content $file -Raw
          if ($content -match 'System\.Reflection\.Assembly\.GetExecutingAssembly\(\)\.Location') {
            $content = $content -replace 'var path = System\.Reflection\.Assembly\.GetExecutingAssembly\(\)\.Location;', 'var path = AppContext.BaseDirectory;'
            Set-Content $file $content -NoNewline
            Write-Host "✅ Successfully patched RpfManager.cs"
          } else {
            Write-Host "⚠️ Pattern not found in RpfManager.cs - may already be patched"
          }

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Dependencies
        shell: pwsh
        run: |
          # Restore CodeWalker.Core
          dotnet restore CodeWalker.Core/CodeWalker.Core.csproj
          
          # Find and restore main project
          $projectFiles = Get-ChildItem -Filter "*.csproj" -Exclude "CodeWalker.Core.csproj" -Recurse | Where-Object { $_.Directory.Name -ne "CodeWalker.Core" }
          
          if ($projectFiles.Count -eq 0) {
            Write-Host "❌ No main project file found!"
            Get-ChildItem -Filter "*.csproj" -Recurse | Format-Table Name, Directory
            exit 1
          }
          
          $mainProject = $projectFiles[0].FullName
          Write-Host "✅ Found main project: $($mainProject)"
          dotnet restore "$mainProject"

      - name: Build and Publish
        shell: pwsh
        run: |
          # Find main project file
          $projectFiles = Get-ChildItem -Filter "*.csproj" -Exclude "CodeWalker.Core.csproj" -Recurse | Where-Object { $_.Directory.Name -ne "CodeWalker.Core" }
          $mainProject = $projectFiles[0].FullName
          
          Write-Host "Publishing project: $mainProject"
          dotnet publish "$mainProject" `
            -c Release `
            -r win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:PublishTrimmed=false `
            --verbosity minimal

      - name: Verify Build Output
        shell: pwsh
        run: |
          # Find the actual publish directory based on project structure
          $projectFiles = Get-ChildItem -Filter "*.csproj" -Exclude "CodeWalker.Core.csproj" -Recurse | Where-Object { $_.Directory.Name -ne "CodeWalker.Core" }
          $projectDir = $projectFiles[0].Directory.FullName
          $publishDir = Join-Path $projectDir "bin\Release\net9.0\win-x64\publish"
          $exePath = Join-Path $publishDir "cdx_fivem_maps_patcher.exe"
          
          Write-Host "Looking for publish directory at: $publishDir"
          
          if (!(Test-Path $publishDir)) {
            Write-Host "❌ Publish directory not found: $publishDir"
            Write-Host "Available directories:"
            Get-ChildItem -Path $projectDir -Recurse -Directory | Where-Object { $_.Name -eq "publish" } | Format-Table FullName
            exit 1
          }
          
          if (!(Test-Path $exePath)) {
            Write-Host "❌ Executable not found: $exePath"
            Get-ChildItem $publishDir | Format-Table
            exit 1
          }
          
          $fileSize = (Get-Item $exePath).Length / 1MB
          Write-Host "✅ Build successful - Executable size: $([math]::Round($fileSize, 2)) MB"

      - name: Create Release Package
        shell: pwsh
        run: |
          # Find the actual publish directory
          $projectFiles = Get-ChildItem -Filter "*.csproj" -Exclude "CodeWalker.Core.csproj" -Recurse | Where-Object { $_.Directory.Name -ne "CodeWalker.Core" }
          $projectDir = $projectFiles[0].Directory.FullName
          $publishDir = Join-Path $projectDir "bin\Release\net9.0\win-x64\publish"
          $zipPath = "cdx_fivem_maps_patcher-$($env:GITHUB_REF_NAME).zip"
          
          Compress-Archive -Path "$publishDir\*" -DestinationPath $zipPath -CompressionLevel Optimal
          
          if (!(Test-Path $zipPath)) {
            Write-Host "❌ Failed to create ZIP package"
            exit 1
          }
          
          $zipSize = (Get-Item $zipPath).Length / 1MB
          Write-Host "✅ Package created: $zipPath ($([math]::Round($zipSize, 2)) MB)"

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: "cdx_fivem_maps_patcher-${{ github.ref_name }}.zip"
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}